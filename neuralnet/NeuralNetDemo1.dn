component provides App requires io.TextFile, time.Timer t, data.StringUtil strUtil, io.Output out, data.DecUtil decUtil, InputLayer inputlayer,HiddenLayer hiddenlayer, OutputLayer outputlayer{
  int maxNeurons = 10
  int numNeurons = 1
  int numColumns = 10
  int numWeights = 100
int App:main(AppParam param[]) {

    TextFile file = new TextFile("iris_preprocessed.data", File.FILE_ACCESS_READ)

    dec hw[] = new dec[](0.11,0.12,0.8975514449850308,0.8259630875231351,0.8396453218780727,0.1847291165409244,0.5597920113347954,0.4180766322721108,0.326467387073219,0.649429346525158,0.21,0.08,0.6498252618818541,0.9806731008327448,0.3274252141575177,0.6395648758874342,0.7826522057388018,0.1597749708677736,0.9057779976329589,0.3900467924835007,0.26049273779633586,0.2457240600190319,0.704935090041929,0.10272455819498649,0.4214875548160081,0.9676451732414311,0.5935062858159891,0.6552628091006863,0.8660427126877915,0.4103213177658219,0.4714268553950679,0.9341176598577112,0.8118406273595483,0.02482375989240282,0.7950025888564589,0.713078068622762,0.8636426442144839,0.5498241110111992,0.9586111809114833,0.17242011440469474,0.9166148841389989,0.9403203101528896,0.07199607148022635,0.4542570010765351,0.44971876227205,0.19876765637039295,0.2648187367538568,0.7375437115403964,0.7405969048627452,0.157237311806527,0.5468948071455431,0.11203009606129721,0.43405587617730546,0.3535177389549239,0.4156332852676796,0.3685368842270217,0.8909386622548183,0.23041061878551972,0.25837369785201014,0.18815077804922775,0.4834097322764991,0.4184109475122879,0.7810131887559597,0.8086487449069546,0.1733905596673262,0.7224425712531728,0.967469230066472,0.9193959358474934,0.29669869270805294,0.4378027897409361,0.9668377206363972,0.9032245677682504,0.3273678085220628,0.6190963467303651,0.7434431705419996,0.6000458476237226,0.8682381370019012,0.4788661838124897,0.5578162164911837,0.6625673287199272,0.3227666727330104,0.49467179485496726,0.19790737039394124,0.08908335421086544,0.5924876923085678,0.2810465999762748,0.7034775329353639,0.17163297259667598,0.9709508119655926,0.053684221548445876,0.0715550081529065,0.215993105241867,0.23576812481277454,0.318683636289932,0.0058013600128324905,0.7960776043734167,0.9050674337583884,0.47888875924699115,0.8071847792238936,0.996237364365535)

    dec ow[] = new dec[](0.14,0.639026739930506,0.09656220443086494,0.7389755671827295,0.8440216571998663,0.857509243000274,0.007337529527237763,0.08219826894031257,0.27657927600064436,0.5916394685236479,0.15,0.3881810460869758,0.7211773927505378,0.9480743062738436,0.7175403538352185,0.0733276684144768,0.9774318068223417,0.8269080597993342,0.542687914256608,0.41065639182305524,0.46264874603099715,0.8533264081577662,0.30983884917079385,0.1270968307528586,0.9100304730064236,0.8130042572876505,0.7405998553030444,0.6545573379584166,0.6897464553506095,0.5988189013056988,0.16304714318625702,0.643168972563027,0.5041754394860624,0.12996881454890186,0.24064720889197644,0.8999967056214058,0.18221668589341722,0.19598420682480922,0.20745123142072386,0.19549570026523078,0.7387507621972764,0.38572235007709854,0.7477755840829301,0.8894884478763211,0.4022136497472435,0.9791282396404581,0.7046347498525471,0.7265337366420201,0.3577297166621636,0.8939334344568918,0.11128572223971189,0.5112917428781085,0.38687946903121995,0.2808134882580733,0.9742326552851883,0.18059981342885445,0.15924469136973374,0.9832915306898068,0.5663554561983483,0.25000168016917546,0.026017371301638392,0.25365325217593404,0.7074877428842801,0.23084657935429842,0.6532458055730542,0.10203753153458195,0.1267100806981114,0.4539802118386508,0.9674027600554266,0.685658446304345,0.29703185760055495,0.9205136327297707,0.34590627544934505,0.9464147376288375,0.8708916285858871,0.20494637276718775,0.3075668260138813,0.46176173699172396,0.19142644932849373,0.6662883285784145,0.2327974766170976,0.5397783879242863,0.7478712260767885,0.7947938262061861,0.25337864607907157,0.11252179363838588,0.6569742704375185,0.5331891192519712,0.09486008631272735,0.22402831571314397,0.8355237784350935,0.688784528866512,0.7582655609649478,0.6059722540947617,0.23421280611651774,0.14451252359743783,0.8924786617700937,0.5346603565124144,0.32832405616692295,0.2881680755434265)

    for (int epoch=0; epoch < 10000; epoch++){
      
        dec values[] = new dec[](2.0,3.0)
     		dec actual[] = new dec[](1.0)

        dec i1[] = inputlayer.fowardPropagation(values)
        /* printWeights(i1)
        out.println("\n") */
        dec h1[] = hiddenlayer.fowardPropagation(i1,hw)
        out.println("Hidden Layer Output")
        printWeights(h1)
        out.println("\n")
        dec ho[] = outputlayer.fowardPropagation(h1,ow)
        /* printWeights(ho) */
        out.println("Predicted: $(decUtil.decToString(ho[0])) Actual: $(decUtil.decToString(actual[0]))\n")
        t.sleep(6000)
        dec alpha = 0.05

        dec matrix_actual[] = convertInput(actual)
        dec delta[] = matrix_sub(ho,matrix_actual)

        ow = outputlayer.backPropagation(alpha,delta,h1)
        hw = hiddenlayer.backPropagation(alpha,delta[0],i1,ow)
      /* } */
    }

		return 0
	}
  void printWeights(dec weights[]){
    for (int i=0; i < numColumns; i++){
      for (int j=0; j < numColumns; j++){
        int index = i*numColumns+j
        out.print("$(decUtil.decToString(weights[index]))  ")
      }
      out.print("\n")
    }
  }
  dec[] convertInput(dec values[]){
    dec newInput[100]
    for (int i =0; i < numNeurons; i++){
      newInput[i] = values[i]
    }
    for (int i =numNeurons; i < maxNeurons; i++){
      newInput[i] = 0
    }
    return newInput
  }

  dec[] matrix_sub(dec matrix_a[], dec matrix_b[]){
    dec subtraction[100]
    for (int c = 0; c < numColumns; c++) {
     for (int d = 0; d < numColumns; d++) {
         int index = c*numColumns+d
         subtraction[index] = matrix_a[index]-matrix_b[index]
       }
   }
   return subtraction
  }

  dec[] matrix_scalar_mul(dec a, dec matrix_b[]){
    dec result[100]
    for (int c = 0; c < numColumns; c++) {
     for (int d = 0; d < numColumns; d++) {
         int index = c*numColumns+d
         result[index] = a*matrix_b[index]
       }
   }
   return result
  }

  dec[] matrix_mul(dec matrix_a[], dec matrix_b[]){
    dec sum = 0.0
    dec multiply[100]
    // rows of first matrix
    for (int c = 0; c < numColumns; c++) {
      // columns of second matrix
     for (int d = 0; d < numColumns; d++) {
       //  rows of second matrix
       for (int k = 0; k < numColumns; k++) {
         int indexFirst = c*numColumns+k
         int indexSecond = k*numColumns+d
         sum = sum + matrix_a[indexFirst]*matrix_b[indexSecond]
       }
       int indexThird = c*numColumns+d
       multiply[indexThird] = sum
       sum = 0
     }
   }
   return multiply
  }
}
