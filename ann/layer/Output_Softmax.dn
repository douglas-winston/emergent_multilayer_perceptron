data Values{
    dec loss
}

component provides layer.Output requires io.Output out,
data.DecUtil decUtil, data.IntUtil intUtil, data.StringUtil strUtil, util.Math math {

    int num_neurons = 3
    int MAX_NEURONS = 16

    dec mask[] = new dec[](1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)

    transfer dec weights[] = new dec[](0.2, 0.9, 0.8, 0.6, 0.5, 0.8, 0.4, 0.2, 0.7, 0.2, 0.2, 0.5, 0.4, 0.6, 0.8, 0.7, 0.4, 0.8, 0.5, 0.2, 0.6, 0.5, 0.7, 0.8, 0.6, 0.8, 0.6, 0.2, 0.7, 0.7, 0.9, 0.8, 0.2, 0.1, 0.2, 0.3, 0.1, 0.8, 0.5, 0.9, 0.5, 0.3, 0.9, 0.3, 0.5, 0.4, 0.8, 0.2, 0.8, 0.4, 0.6, 0.2, 0.3, 0.3, 0.6, 0.8, 0.5, 0.6, 0.1, 0.2, 0.7, 0.5, 0.2, 0.8, 0.5, 0.6, 0.7, 0.7, 0.8, 0.4, 0.6, 0.8, 0.7, 0.7, 0.5, 0.7, 0.5, 0.8, 0.2, 0.7, 0.4, 0.7, 0.5, 0.8, 0.7, 0.5, 0.4, 0.3, 0.8, 0.5, 0.2, 0.5, 0.6, 0.2, 0.7, 0.9, 0.7, 0.2, 0.7, 0.6, 0.3, 0.3, 0.2, 0.6, 0.8, 0.8, 0.1, 0.3, 0.4, 0.7, 0.8, 0.3, 0.4, 0.8, 0.3, 0.8, 0.2, 0.1, 0.5, 0.8, 0.7, 0.6, 0.3, 0.1, 0.2, 0.7, 0.4, 0.4, 0.3, 0.8, 0.3, 0.6, 0.5, 0.3, 0.8, 0.6, 0.7, 0.7, 0.7, 0.8, 0.3, 0.3, 0.3, 0.4, 0.7, 0.2, 0.6, 0.2, 0.9, 0.8, 0.8, 0.1, 0.8, 0.5, 0.6, 0.6, 0.4, 0.9, 0.6, 0.5, 0.6, 0.4, 0.7, 0.6, 0.5, 0.2, 0.7, 0.7, 0.3, 0.6, 0.7, 0.9, 0.3, 0.2, 0.1, 0.4, 0.2, 0.8, 0.1, 0.8, 0.7, 0.3, 0.4, 0.4, 0.6, 0.1, 0.8, 0.6, 0.1, 0.6, 0.4, 0.4, 0.9, 0.2, 0.4, 0.7, 0.8, 0.6, 0.7, 0.7, 0.1, 0.3, 0.3, 0.9, 0.3, 0.8, 0.8, 0.2, 0.5, 0.6, 0.3, 0.1, 0.9, 0.3, 0.3, 0.8, 0.2, 0.7, 0.6, 0.1, 0.7, 0.6, 0.9, 0.5, 0.5, 0.6, 0.4, 0.1, 0.4, 0.3, 0.4, 0.4, 0.3, 0.2, 0.8, 0.7, 0.2, 0.7, 0.8, 0.5, 0.6, 0.4, 0.3, 0.8, 0.4, 0.6, 0.7, 0.5, 0.5, 0.2, 0.5, 0.4, 0.8, 0.9, 0.1, 0.1)

    transfer dec bias[] =  new dec[](1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)

    Values Output:foward(dec previous_array[], dec previous_mask[], dec y_array[], dec alpha){
        /* FOWARDPROPAGATION */
        /*  Get the number of neurons of previous layer*/
        int previous_num_neurons = get_number_neurons(previous_mask)
        /* Filter real input dimensions */
        dec real_input[] = filter_array(previous_array,previous_mask,previous_num_neurons)
        /* Construct logical mask for filtering dimensions */
        dec previous_mask_matrix[] = create_matrix_mask(previous_mask, MAX_NEURONS, MAX_NEURONS)
        dec previous_mask_matrix_t[] = transpose_matrix(previous_mask_matrix, MAX_NEURONS, MAX_NEURONS)
        dec mask_matrix[] = create_matrix_mask(mask, MAX_NEURONS, MAX_NEURONS)
        dec weights_mask[] = logical_and_array(previous_mask_matrix_t,mask_matrix, MAX_NEURONS)
        /* Filter real dimensions of weigths and bias */
        dec real_weights[] = filter_matrix (weights, weights_mask, previous_num_neurons, num_neurons)
        dec real_bias[] = filter_array(bias,mask,num_neurons)
        /*  Input x Weights */
        dec output_weights[] = array_multi_matrix(real_input, real_weights, previous_num_neurons, num_neurons)
        /*  Output + bias*/
        dec output_bias[] = array_plus_array(output_weights,real_bias)
        /*  Softmax activation*/
        dec activated_output[] = new dec[output_bias.arrayLength]
        for (int i=0; i < output_bias.arrayLength; i++){
                activated_output[i] = math.natexp(output_bias[i]) / sum_natexp(output_bias)
        }
        /*  Cross-entropy error*/
        dec cross_entropy_loss = 0.0
        for (int i=0; i < activated_output.arrayLength; i++){
                cross_entropy_loss += y_array[i]*math.log(activated_output[i]) + (1.0-y_array[i])*math.log(1.0-activated_output[i])
        }
        cross_entropy_loss = -1.0*cross_entropy_loss
        Values return_data = new Values()
        return_data.loss =  cross_entropy_loss
        /* BACKPROPAGATION */
        /* Derivation of cross-entropy with output */
        dec delta_cross_entropy[] = new dec[activated_output.arrayLength]
        for (int i=0; i< delta_cross_entropy.arrayLength; i++){
            delta_cross_entropy[i] = -1.0*(y_array[i]*(1.0/activated_output[i]) + (1.0 - y_array[i])* (1.0/(1.0-activated_output[i])))
        }
        dec delta_cross_entropy_m[] = create_matrix_mask(delta_cross_entropy, previous_num_neurons, num_neurons)
        /*  Derivation of softmax activation function with output layer input*/
        dec delta_softmax[] = new dec[output_bias.arrayLength]
        dec aux_d_softmax = math.power(sum_natexp(output_bias), 2)
        for (int i=0; i< delta_softmax.arrayLength; i++){
            delta_softmax[i] = output_bias[i]*(sum_natexp(output_bias)-math.natexp(output_bias[i]))/aux_d_softmax
        }
        dec delta_softmax_m[] = create_matrix_mask(delta_softmax, previous_num_neurons, num_neurons)
        /* Derivation of input to output layer with weights*/
        dec delta_input[] = real_input
        dec delta_input_m[] = new dec[previous_num_neurons*num_neurons]
        for (int j=0; j < num_neurons; j++){
            for (int i=0; i < previous_num_neurons; i++){
                int index = i*num_neurons+j
                delta_input_m[index] = real_input[i]
            }
        }
        dec aux_delta_weights[] = matrix_point_mul(delta_cross_entropy_m, delta_softmax_m, previous_num_neurons, num_neurons)
        dec delta_weights_m[] = matrix_point_mul(aux_delta_weights, delta_input_m, previous_num_neurons, num_neurons)
        /* Calculate New Weights */
        dec aux_new_weights[] = scalar_matrix_mul(alpha, delta_weights_m, previous_num_neurons, num_neurons)
        dec new_weights[] = matrix_sub_mul(weights, aux_new_weights, previous_num_neurons, num_neurons)
        weights = new_weights
        return return_data
    }
    int get_number_neurons(dec array[]){
        int count = 0
        for (int i=0; i < array.arrayLength; i++){
            if (array[i] == 1.0)
                count++
        }
        return count
    }
    void print_array(dec array[]){
        for (int i=0; i < array.arrayLength; i++){
            out.print("$(decUtil.decToString(array[i])) ")
        }
        out.println(" ")
    }
    void print_matrix(dec matrix[], int num_rows, int num_columns){
        for (int i=0; i < num_rows; i++){
            for (int j=0; j < num_columns; j++){
                int index = i*num_columns+j
                out.print("$(decUtil.decToString(matrix[index])) ")
            }
            out.print("\n")
        }
    }
    dec[] create_matrix_mask(dec array[], int num_rows, int num_columns){
        dec mask_matrix[] = new dec[num_rows*num_columns]
        for (int i=0; i < num_rows; i++){
            for (int j=0; j < num_columns; j++){
                int index = i*num_columns+j
                mask_matrix[index] = array[j]
            }
        }
        return mask_matrix
    }
    dec[] transpose_matrix (dec matrix[], int num_rows, int num_columns){
        dec transpose_matrix[] = new dec[num_rows*num_columns]
        for (int c = 0; c < num_rows; c++) {
            for (int d = 0; d < num_columns; d++){
                int index = c*num_columns+d
                int index_transpose = d*num_columns+c
                transpose_matrix[index_transpose] = matrix[index]
            }
        }
        return transpose_matrix
    }
    dec[] logical_and_array (dec array_1[], dec array_2[], int num_columns){
        dec and_array[] = new dec[num_columns*num_columns]
        for (int i=0; i < array_1.arrayLength; i++){
            if (array_1[i] == array_2[i] && array_1[i] == 1.0)
                and_array[i] = 1.0
            else
                and_array[i] = 0.0
        }
        return and_array
    }
    dec[] filter_matrix (dec w_array[], dec w_mask[], int previous_num_neurons, int l_num_neurons){
        dec real_weights[] = new dec[previous_num_neurons*l_num_neurons]
        int c = 0
        for (int i = 0; i < w_array.arrayLength; i++) {
                if (w_mask[i] == 1.0){
                    real_weights[c] = w_array[i]
                    c++
                }
        }
        return real_weights
    }
    dec[] filter_array (dec i_array[], dec i_mask[], int number_neurons){
        dec new_array[] = new dec[number_neurons]
        int c = 0
        for (int i = 0; i < i_array.arrayLength; i++) {
                if (i_mask[i] == 1.0){
                    new_array[c] = i_array[i]
                    c++
                }
        }
        return new_array
    }
    dec[] array_multi_matrix(dec i_array[], dec i_matrix[], int number_rows, int number_columns){
        dec sum = 0.0
        dec multiply[] = new dec[number_columns]
        for (int c = 0; c < number_columns; c++) {
            int k = 0
            for (int d = 0; d < number_rows; d++) {
                int index = d*number_columns+c
                sum = sum + i_array[k]*i_matrix[index]
                k++
            }
                multiply[c] = sum
                sum = 0
        }
        return multiply
    }

    dec[] matrix_point_mul(dec matrix_a[], dec matrix_b[], int number_rows, int number_columns){
        dec multiply[] = new dec[number_rows*number_columns]
        for (int c = 0; c < number_rows; c++) {
            for (int d = 0; d < number_columns; d++) {
                int index = c*number_columns+d
                multiply[index] = matrix_a[index]*matrix_b[index]
            }
        }
        return multiply
    }
    dec[] matrix_sub_mul(dec matrix_a[], dec matrix_b[], int number_rows, int number_columns){
        dec sub[] = new dec[number_rows*number_columns]
        for (int c = 0; c < number_rows; c++) {
            for (int d = 0; d < number_columns; d++) {
                int index = c*number_columns+d
                sub[index] = matrix_a[index]-matrix_b[index]
            }
        }
        return sub
    }
    dec[] scalar_matrix_mul(dec scalar, dec matrix_b[], int number_rows, int number_columns){
        dec multiply[] = new dec[number_rows*number_columns]
        for (int c = 0; c < number_rows; c++) {
            for (int d = 0; d < number_columns; d++) {
                int index = c*number_columns+d
                multiply[index] = scalar*matrix_b[index]
            }
        }
        return multiply
    }
    dec[] array_plus_array(dec a_array[], dec b_array[]){
        dec sum_array[] = new dec[a_array.arrayLength]

        for (int c = 0; c < a_array.arrayLength; c++) {
            sum_array[c] = a_array[c] + b_array[c]
        }
        return sum_array
    }
    dec sum_natexp(dec a_array[]){
        dec sum = 0
        for (int c = 0; c < a_array.arrayLength; c++) {
            sum = sum + math.natexp(a_array[c])
        }
        return sum
    }
}
