const char debugMSG[] = "[@NeuralNetProxy]"

component provides OutputLayer, monitoring.BeingMonitored requires io.Output out,
	OutputLayer output, monitoring.Container {

	static Container monitor

	implementation BeingMonitored {
		Event[] BeingMonitored:getEvents() {
			if (monitor == null) { monitor = new Container() }
			return monitor.getEvents()
		}

		Metric[] BeingMonitored:getMetrics() {
			if (monitor == null) { monitor = new Container() }
			return monitor.getMetrics()
		}

		void BeingMonitored:turnMonitorOn() {
			if (monitor == null) { monitor = new Container() }
			monitor.turnMonitorOn()
		}

		void BeingMonitored:turnMonitorOff() {
			if (monitor == null) { monitor = new Container() }
			monitor.turnMonitorOff()
		}
	}

	implementation OutputLayer {
	    void OutputLayer:input(dec weights[]){
	        output.input(weights)
	    }

		dec[] OutputLayer:output(){
			if (monitor == null) {
				monitor = new Container()
				monitor.turnMonitorOn()
			}

			dec returnOutput[] = output.output()

			/* processing */

			monitor.addMetric("learning_accuracy_avg", 5.4, false, true)
			monitor.addMetric("learning_accuracy_last", 5.6, false, false)
			monitor.addEvent("event_example", 1)

			return returnOutput
		}
	}
}
